# Resolving Recycling Conflicts

The Conflict Resolution framework helps Liferay users identify and solve
conflicts in the Recycle Bin. The most common conflict for the Recycle Bin is
duplicate naming. For instance, you have file 1 and file 2, both with the same
name. Suppose you move file 1 to the Recycle Bin from a folder. Then, in that
folder, you create file 2. You would get a naming conflict because, although
file 1 is in the Recycle Bin, it is also still located in the original folder,
but with its status changed and visibility turned off.

This tutorial covers how to implement the Conflict Resolution framework so you 
can avoid Recycle Bin conflicts.

Follow these steps and you'll be resolving conflicts in no time! You're on your 
own when it comes to conflicts outside of the Recyle Bin:

1. Rename Entities sent to the Recycle Bin
2. Restore the Entity's Original Name When Restoring From Recycle Bin
3. Implement Conflict Resolution Trash Handler Methods

## Step 1: Rename Entities Sent to the Recycle Bin

When an entry is sent to the Recycle Bin, it is essentially replicated. We keep
the entity in its original location and create a similar entry in the Recycle
Bin. When viewing the entry from the Recycle Bin UI, the name appears the same
as the original entry. But the portal needs a way to distinguish between the two
entries. This requires adding logic to your entity's service and leveraging
trash utilities to generate new names for the Recycle Bin entries. 

When an entry is sent to the Recycle Bin, it's still located in its original
location, but with a different status. Users may create an entity with a name,
move it to the Recycle Bin, and then create another entity with the same name.
Since both entities are residing in the same location, a naming conflict could
occur. Some applications only allow one entity to exist with a particular field;
for example, names for documents, titles for songs in an album, friendly URLs
for pages, etc. On moving an entity to the Recycle Bin, you need to rename its
fields that could generate conflicts to something unique. For example Liferay's
Jukebox Portlet uses a `UnicodeProperties` instance to hold a mapping of each
song's title:

    UnicodeProperties typeSettingsProperties = new UnicodeProperties();

    typeSettingsProperties.put("title", song.getName());

    TrashEntry trashEntry = trashEntryLocalService.addTrashEntry(
        userId, song.getGroupId(), Song.class.getName(), song.getSongId(),
        song.getUuid(), null, oldStatus, null, typeSettingsProperties);

    song.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));

The mapping is stored with the trash entry. 
`TrashUtil.getTrashTitle(trashEntry.getEntryId())` is invoked from
 [SongLocalServiceImpl](https://github.com/liferay-labs/jukebox-portlet/blob/master/docroot/WEB-INF/src/org/liferay/jukebox/service/impl/SongLocalServiceImpl.java)'s
`moveSongToTrash` method to set the name of the original entity, a song in this 
case, to a unique value that can be used to look up the trash entry associated 
with the entity. Invoking `TrashUtil.getTrashTitle(trashEntry.getEntryId())` 
resets the name of the original entity to a unique value--a slash followed by 
the ID of the entity's trash entry. Since the entity is now in the Recycle Bin, 
it is hidden from viewing in its original location; so you don't have to worry 
about this lookup value being visible to users. As you'll see shortly, the unique 
names generated by `TrashUtil.getTrashTitle(...)` are used for looking up the 
names of the original entities, on restoring those entities from the Recycle Bin. 

![Figure 1: The Recycle Bin allows you to manage trash entries, even if they share the same name.](../../images/trash-entries-with-same-name.png)

Next, you'll see how to restore the original name of each trashed entity when 
it's restored from the Recycle Bin. 

## Step 2: Restore the Entity's Original Name When Restoring From Recycle Bin

Since your entity is renamed, you'll need a way to retrieve its old name, in the
case that the entity gets restored. The code snippet below, found in the
`restoreSongFromTrash(long userId, long songId)` method of the Jukebox portlet's
 [SongLocalServiceImpl](https://github.com/liferay-labs/jukebox-portlet/blob/master/docroot/WEB-INF/src/org/liferay/jukebox/service/impl/SongLocalServiceImpl.java)
portrays how this is done:

    Song song = songPersistence.findByPrimaryKey(songId);

    song.setName(TrashUtil.getOriginalTitle(song.getName()));

The original entity is retrieved by its ID. Then the
`TrashUtil.getOriginalTitle(...)` method is called to look up the entity's
original name. Remember that the entity's current name is based on the trash
entry's ID. `TrashUtil`'s `getTrashTitle()` method looks up the trash entry and
returns the *title* value (the song's original name in this case) previously 
mapped in the entry's type settings properties. the original song name is set 
back to the song entity. 

Lastly, whether an entity is in the Recycle Bin or not, it's always nice to
render the entity with its original name. As an example of rendering a song's
original title based on a locale, the Jukebox portlet's [SongAssetRenderer](https://github.com/liferay-labs/jukebox-portlet/blob/master/docroot/WEB-INF/src/org/liferay/jukebox/asset/SongAssetRenderer.java)
provides the following implementation:
 
    @Override
    public String getTitle(Locale locale) {
        if (!_song.isInTrash()) {
            return _song.getName();
        }

        return TrashUtil.getOriginalTitle(_song.getName());
    }

If the song isn't in the Recycle Bin, the song's current name is returned.
Otherwise, the method invokes `TrashUtil.getOriginalTitle(_song.getName())` to
return the song's original name. 

Lastly, you need to implement some required methods to finalize the Conflicts
Resolution framework.

## Step 3: Implement Conflict Resolution Trash Handler Methods

Your app can now uniquely rename entries on removal and reinstate their original
names when restored. What happens when the original entry is restored to its
original location where a new entry with the same already exists? This causes a
naming conflict that needs to be resolved by the user.

The Recycle Bin framework provides a UI for users to decide whether to overwrite
the existing entry or to keep both entries by updating the title of the entry
they're restoring. The figure below exemplifies a conflict resolution pop-up on
trying to restore a song for which an identically named song is already present
in the Songs portlet. 

![Figure 2: The Recycle Bin enables you to handle conflicts by notifying the user with a pop-up message and options for solving the problem.](../../images/resolved-conflict-rb.png)

Two methods need to be implemented in the trash handler to allow for the 
necessary checks and updates. The first method should check for duplicate trash 
entries. If an entry with the same name is detected in a directory, an exception 
must be thrown. You can reference the `checkDuplicateTrashEntry()` method from
 [SongTrashHandler](https://github.com/liferay-labs/jukebox-portlet/blob/master/docroot/WEB-INF/src/org/liferay/jukebox/trash/SongTrashHandler.java)
below to see how this is done:

	public void checkDuplicateTrashEntry(
			TrashEntry trashEntry, long containerModelId, String newName)
		throws PortalException {

		Song song = SongLocalServiceUtil.getSong(trashEntry.getClassPK());

		if (containerModelId == TrashEntryConstants.DEFAULT_CONTAINER_ID) {
			containerModelId = song.getAlbumId();
		}

		String originalName = trashEntry.getTypeSettingsProperty("title");

		if (Validator.isNotNull(newName)) {
			originalName = newName;
		}

		Song duplicateSong = SongLocalServiceUtil.getSong(
			song.getGroupId(), song.getArtistId(), containerModelId,
			originalName);

		if (duplicateSong != null) {
			RestoreEntryException ree = new RestoreEntryException();

			ree.setDuplicateEntryId(duplicateSong.getSongId());
			ree.setOldName(duplicateSong.getName());
			ree.setTrashEntryId(trashEntry.getEntryId());

			throw ree;
		}
	}

Lastly, implement a method that updates the entry title name. For instance, the
Jukebox portlet updates a song title by calling the `updateTitle()` method:

	public void updateTitle(long classPK, String name) throws PortalException {
		Song song = SongLocalServiceUtil.getSong(classPK);

		song.setName(name);

		SongLocalServiceUtil.updateSong(song);
	}
	
which can also be found in the [SongTrashHandler](https://github.com/liferay-labs/jukebox-portlet/blob/master/docroot/WEB-INF/src/org/liferay/jukebox/trash/SongTrashHandler.java)
class. This method is called when the entry you're restoring needs its title
updated, so it no longer conflicts with the preexisting entry that has the same
name. After implementing these methods, you should always be able to resolve
naming conflicts between your trashed entries.

Fantastic! By leveraging the Conflicts Resolution framework in your app, you're
able to provide a smarter Recycle Bin that handles potential conflicts with
ease.
