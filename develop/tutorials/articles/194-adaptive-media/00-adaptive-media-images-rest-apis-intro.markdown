Adaptive Media Images REST API

This document sums up all the details concerning Adaptive Media Images REST API. This API allows developers to use almost all of the functionality of the Adaptive Media Liferay App.

[[TOC]]

# Introduction

In order to use/test this API you will need to:

- Deploy all adaptive media modules

- *Optional:* if you want to auto-generate test data you can use the
*"adaptive-media-demo"* module. For using this demo you’ll need to deploy the
following modules:

    - *users-admin-demo-data-creator* (both api and implementation)

    - *document-library-demo-data-creator *(both api and implementation)

- Once the app is running you can consumed using the endpoints listed in
[endpoints](#heading=h.ekgnoyx0qtbs) using curl or other HTTP client. One client
really simple to use is [Advance Rest Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo), available as a Google Chrome APP. On Firefox you can use [REST Easy](https://addons.mozilla.org/en-US/firefox/addon/rest-easy/).

    - If you want to use Advance Rest Client you can follow [this video](https://drive.google.com/open?id=0B1weV2REHIZca3VWTkIxbzJOVU0) to
    learn how to use it with the Adaptive Media API.

# Endpoints

Root endpoint for Adaptive Media is /o/adaptive-media-rest/images by default. So,
for example, if your server address is [http://www.example.com](http://www.example.com)
the API you’ll need to consume is: [http://www.example.com/o/adaptive-media-rest/images](http://www.example.com/o/adaptive-media-rest/images)

The API endpoints has been divided by functionality, resulting in two parts:

- */configuration:* Here are all the endpoints related with configuration. It’s
basically a simple CRUD.

- */content:* The content part, where the user can request both AM data and
metadata.

## Configuration

Configuration request are made through */configuration* endpoint. Here we have
this possible requests:

### List all available configurations

<table>
  <tr>
    <td>GET / </td>
    <td>STATUS CODES: 200, 500</td>
  </tr>
  <tr>
    <td>[
{
"name": "Extra large demo size",
"id": "demo-xlarge",
"max-width": "1200",
"max-height": "1200"
},
{
"name": "Extra small demo size",
"id": "demo-xsmall",
"max-width": "50",
"max-height": "50"
},
{
"name": "Large demo size",
"id": "demo-large",
"max-width": "800",
"max-height": "800"
}
]</td>
    <td></td>
  </tr>
</table>


### Get some configuration by its id

<table>
  <tr>
    <td>GET /:configurationId</td>
    <td>STATUS CODES: 200, 404 (Non-existent configuration)</td>
  </tr>
  <tr>
    <td>{
"name": "Small demo size",
"id": "demo-small",
"max-width": "100",
"max-height": "100"
}</td>
    <td></td>
  </tr>
</table>


### Add a new configuration

<table>
  <tr>
    <td>PUT /:configurationId</td>
    <td>STATUS CODES: 200, 400 (wrong body), 403 (user without permission)</td>
  </tr>
  <tr>
    <td>BODY:
{
  "name": "Small Size",
  "max-height": 100,
  "max-width": 100
}</td>
    <td></td>
  </tr>
  <tr>
    <td>{
"name": "Small Size",
"id": "small",
"max-height": "100",
"max-width": "100"
}</td>
    <td></td>
  </tr>
</table>


### Delete configuration

<table>
  <tr>
    <td>DELETE /:configurationId</td>
    <td>STATUS CODES: 200, 403 (user without permission)</td>
  </tr>
  <tr>
    <td>BODY:
{
  "name": "Small Size",
  "max-height": 100,
  "max-width": 100
}</td>
    <td></td>
  </tr>
  <tr>
    <td>{
"name": "Small Size",
"id": "small",
"max-height": "100",
"max-width": "100"
}</td>
    <td></td>
  </tr>
</table>


## Content

On the other hand, content request must be made through the /content endpoint.
Then the next thing you need to do is select the image whose adaptive medias you
want to recover. For that, you have two possible ways: by fileEntryId or by
fileVersionId.

- */content/file/:***_fileEntryId_***/version/:***_version_**: you’ll need to
provide the fileEntryId alongside with the version name. This version name will
be a string like: 1.0, 1.2, 2.3, etc. Or you can use a special name "last" which
will give you the last version for that file entry.

- */content/version/:***_fileVersionId_**: or also, you can provide the
fileVersionId directly and get the same file as the one you would get going to
the previous endpoint.

Once you are "inside" one fileVersion endpoint you have available the following
ways of getting data:

## Config

*/config* endpoint allows developers to get the image generated by a certain
configuration from a fileVersion. If no data is found the API will return the
original bytes (this behaviour can be rejected by passing by an "*original*"
query param with value “*false*”.

<table>
  <tr>
    <td>GET
/content/file/:fileEntryId/version/:version/config/:configId
/content/:fileVersionId/config/:configId</td>
    <td></td>
  </tr>
  <tr>
    <td>STATUS CODES: 200, 403 (user without permission), 404 (fileVersion, fileEntry or configuration not found)</td>
    <td></td>
  </tr>
  <tr>
    <td>Query params:
original - boolean - if true the original image bytes will be used as fallback</td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
  </tr>
</table>


## Data

If you don’t know the config id, or you don’t want to specify it, you can use
the */data* endpoint. This endpoint receives a query where you specify the
properties of the image you want: e.g. width near 200px and height near 500px.
This query is received in the form of a query array param (*query=parameter:value*),
so, for the previous example, the list of query params should be:

**_?query=width:200&query=height:500_**

if you want to retrieve an adaptive media version of the image close to 200px
width, using 500px height to resolve ambiguities.

Also, you have available the original query param too. So, if no adaptive media
can be found for this file version, the original bytes will serve as fallback.

<table>
  <tr>
    <td>GET
/content/file/:fileEntryId/version/:version/data
/content/:fileVersionId/data</td>
    <td></td>
  </tr>
  <tr>
    <td>STATUS CODES: 200, 403 (user without permission), 400 (wrong or undefined query), 404 (fileVersion, fileEntry or no data found)</td>
    <td></td>
  </tr>
  <tr>
    <td>Query params:
original - boolean - if true the original image bytes will be used as fallback
query - string - properties requested for this data in the form of "property:value". It can be more than one of this parameters.</td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
  </tr>
</table>


## Variants

And last, but not least, we have the */variants* endpoint. Use this endpoint to
retrieve the list of adaptive medias created from a fileVersion with all its
metadata in a JSON format. You have available the same "*query*" param as in
the* /data* endpoint and also, an *order* param (opposite to query, so don’t use
  them both at the same time) with a similar form that allow you to perform a
  strict order of the data: *order=property:true|false* (ascendent or not). For
  example:

**_?query=width:200&query=height:500_**

if you want to retrieve an adaptive media version of the image close to 200px
width, using 500px height to resolve ambiguities.

<table>
  <tr>
    <td>GET
/content/file/:fileEntryId/version/:version/variants
/content/:fileVersionId/variants</td>
    <td></td>
  </tr>
  <tr>
    <td>STATUS CODES: 200, 403 (user without permission), 400 (wrong or undefined query, wrong or undefined order or both provided), 404 (fileVersion, fileEntry not found)</td>
    <td></td>
  </tr>
  <tr>
    <td>Query params:
original - boolean - if true the original image bytes will be used as fallback
query - string - properties requested for this data in the form of "property:value". It can be more than one of this parameters.
order - string - property order requested for this data in the form of “property:true|false”. It can be more than one of this parameters. The boolean on the right will mean true (for ascendant order) or false otherwise.</td>
    <td></td>
  </tr>
  <tr>
    <td>[
{
"url": "http://localhost:8080/o/adaptive-media-rest/images/content/version/37278/config/demo-medium",
"configuration": {
"name": "Medium size",
"id": "demo-medium",
"max-width": "400",
"max-height": "400"
},
"content-length": 15024,
"width": 400,
"content-type": "image/jpeg",
"file-name": "d3998933-8a4a-46bb-babd-fd5f8f72de23.jpeg",
"configuration-uuid": "demo-medium",
"height": 225
},
{
"url": "http://localhost:8080/o/adaptive-media-rest/images/content/version/37278/config/demo-small",
"configuration": {
"name": "Small demo size",
"id": "demo-small",
"max-width": "100",
"max-height": "100"
},
"content-length": 2093,
"width": 100,
"content-type": "image/jpeg",
"file-name": "d3998933-8a4a-46bb-babd-fd5f8f72de23.jpeg",
"configuration-uuid": "demo-small",
"height": 56
}
]</td>
    <td></td>
  </tr>
</table>
